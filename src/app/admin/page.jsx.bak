"use client";

import { useState, useEffect } from 'react';
import { fetchProducts, updateProduct, deleteProduct, createProduct, fetchOrders, updateOrder } from '../../lib/api';
import { categories } from '../../lib/products';

export default function AdminPage() {
  const [activeTab, setActiveTab] = useState('inventory');
  
  return (
    <div className="container-custom py-8">
      <h1 className="text-3xl font-bold mb-6 text-center">פאנל ניהול</h1>
      
      <div className="bg-white rounded-lg shadow-md overflow-hidden">
        {/* לשוניות ניווט */}
        <div className="flex border-b">
          <button
            className={`flex-1 py-4 px-6 text-center font-medium ${
              activeTab === 'inventory' ? 'bg-primary text-white' : 'hover:bg-gray-50'
            }`}
            onClick={() => setActiveTab('inventory')}
          >
            ניהול מלאי
          </button>
          <button
            className={`flex-1 py-4 px-6 text-center font-medium ${
              activeTab === 'orders' ? 'bg-primary text-white' : 'hover:bg-gray-50'
            }`}
            onClick={() => setActiveTab('orders')}
          >
            הזמנות שהתקבלו
          </button>
          <button
            className={`flex-1 py-4 px-6 text-center font-medium ${
              activeTab === 'messages' ? 'bg-primary text-white' : 'hover:bg-gray-50'
            }`}
            onClick={() => setActiveTab('messages')}
          >
            הודעות מלקוחות
          </button>
        </div>
        
        {/* תוכן לשוניות */}
        <div className="p-6">
          {activeTab === 'inventory' ? (
            <InventoryManager />
          ) : activeTab === 'orders' ? (
            <OrdersViewer />
          ) : (
            <MessagesViewer />
          )}
        </div>
      </div>
    </div>
  );
}

// קומפוננטת ניהול מלאי
function InventoryManager() {
  const [products, setProducts] = useState([]);
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [editingProduct, setEditingProduct] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [isNewProduct, setIsNewProduct] = useState(false);

  useEffect(() => {
    loadProducts();
  }, []);

  const loadProducts = async (category = null) => {
    try {
      setLoading(true);
      const productsData = await fetchProducts(category !== 'all' ? category : null);
      setProducts(productsData);
      setError(null);
    } catch (err) {
      console.error('Error loading products:', err);
      setError('אירעה שגיאה בטעינת המוצרים');
    } finally {
      setLoading(false);
    }
  };
  
  // סינון מוצרים לפי קטגוריה
  const filteredProducts = selectedCategory === 'all' 
    ? products 
    : products.filter(product => product.category === selectedCategory);
  
  const handleCategoryChange = (e) => {
    const category = e.target.value;
    setSelectedCategory(category);
    loadProducts(category);
  };

  const handleEditProduct = (product) => {
    setEditingProduct({...product});
    setIsNewProduct(false);
  };

  const handleAddNewProduct = () => {
    setEditingProduct({
      name: '',
      price: 0,
      discountPrice: null,
      description: '',
      material: '',
      category: 'necklaces',
      image: '/images/products/placeholder.jpg',
      tags: [],
      featured: false,
      stock: 0
    });
    setIsNewProduct(true);
  };
  
  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    
    setEditingProduct(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : 
              type === 'number' ? Number(value) :
              value
    }));
  };
  
  const handleSaveProduct = async (event) => {
    event.preventDefault();
    
    try {
      setLoading(true);
      
      if (isNewProduct) {
        await createProduct(editingProduct);
      } else {
        await updateProduct(editingProduct._id, editingProduct);
      }
      
      await loadProducts(selectedCategory !== 'all' ? selectedCategory : null);
      setEditingProduct(null);
      alert(isNewProduct ? 'המוצר נוצר בהצלחה!' : 'המוצר נשמר בהצלחה!');
    } catch (err) {
      console.error('Error saving product:', err);
      alert(`שגיאה: ${err.message}`);
    } finally {
      setLoading(false);
    }
  };

  const handleDeleteProduct = async (productId) => {
    if (!confirm('האם את/ה בטוח/ה שברצונך למחוק מוצר זה?')) {
      return;
    }

    try {
      setLoading(true);
      await deleteProduct(productId);
      await loadProducts(selectedCategory !== 'all' ? selectedCategory : null);
      alert('המוצר נמחק בהצלחה!');
    } catch (err) {
      console.error('Error deleting product:', err);
      alert(`שגיאה: ${err.message}`);
    } finally {
      setLoading(false);
    }
  };
  
  if (loading && products.length === 0) {
    return <div className="text-center py-8">טוען...</div>;
  }

  if (error) {
    return <div className="text-center py-8 text-red-500">{error}</div>;
  }
  
  return (
    <div>
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-xl font-semibold">ניהול מלאי</h2>
        
        <div className="flex items-center space-x-4">
          <button 
            className="bg-green-500 hover:bg-green-600 text-white py-2 px-4 rounded"
            onClick={handleAddNewProduct}
          >
            מוצר חדש
          </button>
          
          <div className="flex items-center">
            <span className="ml-2">סנן לפי:</span>
            <select 
              className="border rounded p-2" 
              value={selectedCategory}
              onChange={handleCategoryChange}
            >
              <option value="all">כל הקטגוריות</option>
              {categories.map(category => (
                <option key={category.id} value={category.id}>
                  {category.name}
                </option>
              ))}
            </select>
          </div>
        </div>
      </div>
      
      {editingProduct ? (
        <div className="bg-gray-50 p-6 rounded-lg mb-6">
          <h3 className="text-lg font-medium mb-4">
            {isNewProduct ? 'הוספת מוצר חדש' : 'עריכת מוצר'}
          </h3>
          <form onSubmit={handleSaveProduct}>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
              <div>
                <label className="block mb-1">שם המוצר</label>
                <input 
                  type="text" 
                  name="name"
                  className="w-full border rounded p-2"
                  value={editingProduct.name}
                  onChange={handleInputChange}
                  required
                />
              </div>
              <div>
                <label className="block mb-1">מחיר</label>
                <input 
                  type="number" 
                  name="price"
                  className="w-full border rounded p-2"
                  value={editingProduct.price}
                  onChange={handleInputChange}
                  min="0"
                  required
                />
              </div>
              <div>
                <label className="block mb-1">מחיר מבצע (אופציונלי)</label>
                <input 
                  type="number" 
                  name="discountPrice"
                  className="w-full border rounded p-2"
                  value={editingProduct.discountPrice || ''}
                  onChange={handleInputChange}
                  min="0"
                />
              </div>
              <div>
                <label className="block mb-1">קטגוריה</label>
                <select 
                  className="w-full border rounded p-2"
                  name="category"
                  value={editingProduct.category}
                  onChange={handleInputChange}
                  required
                >
                  {categories.map(category => (
                    <option key={category.id} value={category.id}>
                      {category.name}
                    </option>
                  ))}
                </select>
              </div>
              <div className="md:col-span-2">
                <label className="block mb-1">תיאור</label>
                <textarea 
                  className="w-full border rounded p-2"
                  name="description"
                  rows="3"
                  value={editingProduct.description}
                  onChange={handleInputChange}
                  required
                ></textarea>
              </div>
              <div>
                <label className="block mb-1">חומר</label>
                <input 
                  type="text" 
                  name="material"
                  className="w-full border rounded p-2"
                  value={editingProduct.material}
                  onChange={handleInputChange}
                  required
                />
              </div>
              <div>
                <label className="block mb-1">כמות במלאי</label>
                <input 
                  type="number" 
                  name="stock"
                  className="w-full border rounded p-2"
                  value={editingProduct.stock}
                  onChange={handleInputChange}
                  min="0"
                  required
                />
              </div>
              <div>
                <label className="block mb-1">קישור לתמונה</label>
                <input 
                  type="text" 
                  name="image"
                  className="w-full border rounded p-2"
                  value={editingProduct.image}
                  onChange={handleInputChange}
                  required
                />
              </div>
              <div>
                <label className="block mb-1">תגיות (מופרדות בפסיקים)</label>
                <input 
                  type="text" 
                  name="tags"
                  className="w-full border rounded p-2"
                  value={Array.isArray(editingProduct.tags) ? editingProduct.tags.join(', ') : ''}
                  onChange={(e) => {
                    const tagsArray = e.target.value.split(',').map(tag => tag.trim());
                    setEditingProduct({...editingProduct, tags: tagsArray});
                  }}
                />
              </div>
              <div className="flex items-center">
                <input 
                  type="checkbox" 
                  id="featured"
                  name="featured"
                  className="ml-2"
                  checked={editingProduct.featured}
                  onChange={handleInputChange}
                />
                <label htmlFor="featured">הצג כמוצר מובחר בעמוד הבית</label>
              </div>
            </div>
            <div className="flex gap-2">
              <button type="submit" className="btn-primary" disabled={loading}>
                {loading ? 'שומר...' : 'שמור שינויים'}
              </button>
              <button 
                type="button" 
                className="btn-secondary"
                onClick={() => setEditingProduct(null)}
                disabled={loading}
              >
                ביטול
              </button>
            </div>
          </form>
        </div>
      ) : null}
      
      <div className="overflow-x-auto">
        <table className="w-full border-collapse">
          <thead>
            <tr className="bg-gray-50">
              <th className="border p-2 text-right">תמונה</th>
              <th className="border p-2 text-right">שם</th>
              <th className="border p-2 text-right">קטגוריה</th>
              <th className="border p-2 text-right">מחיר</th>
              <th className="border p-2 text-right">מלאי</th>
              <th className="border p-2 text-right">פעולות</th>
            </tr>
          </thead>
          <tbody>
            {filteredProducts.length > 0 ? (
              filteredProducts.map(product => (
                <tr key={product._id} className="hover:bg-gray-50">
                  <td className="border p-2">
                    <div className="w-12 h-12 bg-gray-200 rounded overflow-hidden">
                      <img 
                        src={product.image} 
                        alt={product.name}
                        className="w-full h-full object-cover"
                      />
                    </div>
                  </td>
                  <td className="border p-2">{product.name}</td>
                  <td className="border p-2">
                    {categories.find(c => c.id === product.category)?.name}
                  </td>
                  <td className="border p-2">
                    {product.discountPrice ? (
                      <>
                        <span className="line-through text-gray-500 ml-2">₪{product.price}</span>
                        <span className="text-primary font-bold">₪{product.discountPrice}</span>
                      </>
                    ) : (
                      <span>₪{product.price}</span>
                    )}
                  </td>
                  <td className="border p-2">
                    <span className={`py-1 px-2 rounded-full text-xs ${
                      product.stock > 10 ? 'bg-green-100 text-green-800' :
                      product.stock > 0 ? 'bg-yellow-100 text-yellow-800' :
                      'bg-red-100 text-red-800'
                    }`}>
                      {product.stock > 0 ? `במלאי (${product.stock})` : 'אזל המלאי'}
                    </span>
                  </td>
                  <td className="border p-2">
                    <div className="flex gap-2">
                      <button 
                        className="bg-blue-500 hover:bg-blue-600 text-white py-1 px-2 rounded text-sm"
                        onClick={() => handleEditProduct(product)}
                      >
                        ערוך
                      </button>
                      <button 
                        className="bg-red-500 hover:bg-red-600 text-white py-1 px-2 rounded text-sm"
                        onClick={() => handleDeleteProduct(product._id)}
                      >
                        הסר
                      </button>
                    </div>
                  </td>
                </tr>
              ))
            ) : (
              <tr>
                <td colSpan="6" className="border p-4 text-center text-gray-500">
                  {loading ? 'טוען מוצרים...' : 'לא נמצאו מוצרים בקטגוריה זו'}
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
}

// קומפוננטת צפייה בהזמנות
function OrdersViewer() {
  const [orders, setOrders] = useState([]);
  const [expandedOrder, setExpandedOrder] = useState(null);
  const [statusFilter, setStatusFilter] = useState('all');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    loadOrders();
  }, []);

  const loadOrders = async (status = null) => {
    try {
      setLoading(true);
      const ordersData = await fetchOrders(status);
      setOrders(ordersData);
      setError(null);
    } catch (err) {
      console.error('Error loading orders:', err);
      setError('אירעה שגיאה בטעינת ההזמנות');
    } finally {
      setLoading(false);
    }
  };
  
  // סינון הזמנות לפי סטטוס
  const filteredOrders = statusFilter === 'all' 
    ? orders 
    : orders.filter(order => order.status === statusFilter);
  
  const handleStatusFilterChange = (e) => {
    const status = e.target.value;
    setStatusFilter(status);
    loadOrders(status !== 'all' ? status : null);
  };

  const handleStatusChange = async (orderId, newStatus) => {
    try {
      setLoading(true);
      await updateOrder(orderId, { status: newStatus });
      await loadOrders(statusFilter !== 'all' ? statusFilter : null);
      alert('סטטוס ההזמנה עודכן בהצלחה!');
    } catch (err) {
      console.error('Error updating order status:', err);
      alert(`שגיאה: ${err.message}`);
    } finally {
      setLoading(false);
    }
  };
  
  const getStatusLabel = (status) => {
    switch(status) {
      case 'pending': return { text: 'ממתין לטיפול', color: 'bg-yellow-100 text-yellow-800' };
      case 'processing': return { text: 'בטיפול', color: 'bg-blue-100 text-blue-800' };
      case 'ready': return { text: 'מוכן לאיסוף', color: 'bg-green-100 text-green-800' };
      case 'completed': return { text: 'הושלם', color: 'bg-gray-100 text-gray-800' };
      case 'cancelled': return { text: 'בוטל', color: 'bg-red-100 text-red-800' };
      default: return { text: 'לא ידוע', color: 'bg-gray-100 text-gray-800' };
    }
  };

  if (loading && orders.length === 0) {
    return <div className="text-center py-8">טוען...</div>;
  }

  if (error) {
    return <div className="text-center py-8 text-red-500">{error}</div>;
  }
  
  return (
    <div>
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-xl font-semibold">הזמנות שהתקבלו</h2>
        
        <div className="flex items-center">
          <span className="ml-2">סנן לפי סטטוס:</span>
          <select 
            className="border rounded p-2" 
            value={statusFilter}
            onChange={handleStatusFilterChange}
          >
            <option value="all">כל ההזמנות</option>
            <option value="pending">ממתין לטיפול</option>
            <option value="processing">בטיפול</option>
            <option value="ready">מוכן לאיסוף</option>
            <option value="completed">הושלם</option>
            <option value="cancelled">בוטל</option>
          </select>
        </div>
      </div>
      
      {filteredOrders.length === 0 ? (
        <div className="text-center py-8 text-gray-500">
          {loading ? 'טוען הזמנות...' : 'לא נמצאו הזמנות בסטטוס זה'}
        </div>
      ) : (
        <div className="space-y-4">
          {filteredOrders.map(order => (
            <div 
              key={order._id} 
              className="border rounded-lg overflow-hidden"
            >
              <div 
                className="flex justify-between items-center p-4 cursor-pointer hover:bg-gray-50"
                onClick={() => setExpandedOrder(expandedOrder === order._id ? null : order._id)}
              >
                <div className="flex flex-col gap-1">
                  <div className="font-medium">הזמנה מס׳ {order._id.substring(order._id.length - 8)}</div>
                  <div className="text-sm text-gray-600">{order.customerName} | {order.customerPhone}</div>
                </div>
                
                <div className="flex items-center gap-4">
                  <div className="text-left">
                    <div className="font-medium">₪{order.total}</div>
                    <div className="text-sm text-gray-600">
                      {new Date(order.createdAt).toLocaleDateString('he-IL')}
                    </div>
                  </div>
                  
                  <div className={`py-1 px-3 rounded-full text-sm ${getStatusLabel(order.status).color}`}>
                    {getStatusLabel(order.status).text}
                  </div>
                  
                  <div className="text-gray-400">
                    {expandedOrder === order._id ? (
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path fillRule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clipRule="evenodd" />
                      </svg>
                    ) : (
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd" />
                      </svg>
                    )}
                  </div>
                </div>
              </div>
              
              {expandedOrder === order._id && (
                <div className="p-4 bg-gray-50 border-t">
                  <h3 className="font-medium mb-2">פריטים בהזמנה</h3>
                  <div className="overflow-x-auto">
                    <table className="min-w-full divide-y divide-gray-200">
                      <thead>
                        <tr>
                          <th className="py-2 px-4 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">שם פריט</th>
                          <th className="py-2 px-4 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">פרטים</th>
                          <th className="py-2 px-4 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">מחיר</th>
                          <th className="py-2 px-4 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">כמות</th>
                          <th className="py-2 px-4 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">סה״כ</th>
                        </tr>
                      </thead>
                      <tbody className="divide-y divide-gray-200">
                        {order.items.map((item, index) => (
                          <tr key={index}>
                            <td className="py-2 px-4 whitespace-nowrap">{item.name}</td>
                            <td className="py-2 px-4">
                              {(item.customOptions || item.customDetails || item.custom || item.name.includes('מותאמ') || item.name.includes('אישי')) && (
                                <div className="bg-primary/5 p-3 rounded-md border border-primary/20">
                                  <h4 className="font-medium text-primary mb-2">פרטי עיצוב מותאם אישית:</h4>
                                  
                                  {item.customDetails && (
                                    <ul className="list-disc mr-4 space-y-2">
                                      {item.customDetails.baseType && (
                                        <li>
                                          <span className="font-medium">סוג בסיס: </span>
                                          {item.customDetails.baseType === 'necklace' ? 'שרשרת' : 
                                           item.customDetails.baseType === 'bracelet' ? 'צמיד' : 
                                           item.customDetails.baseType}
                                        </li>
                                      )}
                                      {item.customDetails.modelName && (
                                        <li>
                                          <span className="font-medium">דגם: </span>
                                          {item.customDetails.modelName}
                                        </li>
                                      )}
                                      {item.customDetails.type && (
                                        <li>
                                          <span className="font-medium">סוג תכשיט: </span>
                                          {typeof item.customDetails.type === 'string' 
                                            ? item.customDetails.type 
                                            : item.customDetails.type.name || 'לא צוין'}
                                        </li>
                                      )}
                                      {item.customDetails.material && (
                                        <li>
                                          <span className="font-medium">חומר: </span>
                                          {typeof item.customDetails.material === 'string' 
                                            ? item.customDetails.material
                                            : item.customDetails.material.name || 'לא צוין'}
                                        </li>
                                      )}
                                      {item.customDetails.length && (
                                        <li>
                                          <span className="font-medium">אורך: </span>
                                          {typeof item.customDetails.length === 'string'
                                            ? item.customDetails.length
                                            : `${item.customDetails.length.lengthValue || ''}${item.customDetails.length.unit ? ` ${item.customDetails.length.unit}` : ''}`}
                                        </li>
                                      )}
                                      {item.customDetails.width && (
                                        <li>
                                          <span className="font-medium">רוחב: </span>
                                          {typeof item.customDetails.width === 'string'
                                            ? item.customDetails.width
                                            : `${item.customDetails.width.widthValue || ''}${item.customDetails.width.unit ? ` ${item.customDetails.width.unit}` : ''}`}
                                        </li>
                                      )}
                                      {item.customDetails.color && (
                                        <li>
                                          <span className="font-medium">צבע: </span>
                                          {typeof item.customDetails.color === 'string' 
                                            ? item.customDetails.color 
                                            : item.customDetails.color.name || item.customDetails.color.value || 'לא צוין'}
                                          {item.customDetails.color && (item.customDetails.color.hex || (typeof item.customDetails.color === 'string' && item.customDetails.color.startsWith('#'))) && (
                                            <span 
                                              className="inline-block w-4 h-4 rounded-full ml-2 border border-gray-300" 
                                              style={{ backgroundColor: typeof item.customDetails.color === 'string' 
                                                ? item.customDetails.color 
                                                : item.customDetails.color.hex }}
                                            ></span>
                                          )}
                                        </li>
                                      )}
                                      {item.customDetails.style && (
                                        <li>
                                          <span className="font-medium">סגנון: </span>
                                          {typeof item.customDetails.style === 'string' 
                                            ? item.customDetails.style
                                            : item.customDetails.style.name || 'לא צוין'}
                                        </li>
                                      )}
                                      {item.customDetails.pattern && (
                                        <li>
                                          <span className="font-medium">דוגמה: </span>
                                          {typeof item.customDetails.pattern === 'string'
                                            ? item.customDetails.pattern
                                            : item.customDetails.pattern.name || 'לא צוין'}
                                        </li>
                                      )}
                                      {item.customDetails.clasp && (
                                        <li>
                                          <span className="font-medium">סוג סוגר: </span>
                                          {typeof item.customDetails.clasp === 'string'
                                            ? item.customDetails.clasp
                                            : item.customDetails.clasp.name || 'לא צוין'}
                                        </li>
                                      )}
                                      {item.customDetails.selectedCharms && item.customDetails.selectedCharms.length > 0 && (
                                        <li>
                                          <span className="font-medium">תליונים נבחרים ({item.customDetails.selectedCharms.length}): </span>
                                          <div className="mt-2 bg-white p-2 rounded border">
                                            <ul className="list-disc mr-6 space-y-1">
                                              {item.customDetails.selectedCharms.map((charm, j) => (
                                                <li key={j} className="flex items-center">
                                                  {charm.image && (
                                                    <span className="inline-block w-6 h-6 rounded-full bg-white border border-gray-200 ml-2 overflow-hidden">
                                                      <img 
                                                        src={charm.image} 
                                                        alt={charm.name} 
                                                        className="w-full h-full object-cover"
                                                      />
                                                    </span>
                                                  )}
                                                  {charm.name || 'תליון ללא שם'}
                                                </li>
                                              ))}
                                            </ul>
                                          </div>
                                        </li>
                                      )}
                                      {item.customDetails.gemstones && item.customDetails.gemstones.length > 0 && (
                                        <li>
                                          <span className="font-medium">אבני חן ({item.customDetails.gemstones.length}): </span>
                                          <div className="mt-2 bg-white p-2 rounded border">
                                            <ul className="list-disc mr-6 space-y-1">
                                              {item.customDetails.gemstones.map((gemstone, j) => (
                                                <li key={j} className="flex items-center">
                                                  {gemstone.color && (
                                                    <span 
                                                      className="inline-block w-4 h-4 rounded-full ml-2 border border-gray-300" 
                                                      style={{ backgroundColor: typeof gemstone.color === 'string' 
                                                        ? gemstone.color 
                                                        : gemstone.color.hex || '#CCCCCC' }}
                                                    ></span>
                                                  )}
                                                  {gemstone.name || 'אבן חן ללא שם'}
                                                  {gemstone.size && <span className="text-xs text-gray-600 mr-1">({gemstone.size})</span>}
                                                </li>
                                              ))}
                                            </ul>
                                          </div>
                                        </li>
                                      )}
                                      {item.customDetails.size && (
                                        <li>
                                          <span className="font-medium">מידה: </span>
                                          {item.customDetails.size}
                                        </li>
                                      )}
                                      {item.customDetails.text && (
                                        <li>
                                          <span className="font-medium">טקסט מותאם אישית: </span>
                                          <div className="mt-1 bg-white p-2 rounded border">"{item.customDetails.text}"</div>
                                        </li>
                                      )}
                                      {item.customDetails.font && (
                                        <li>
                                          <span className="font-medium">פונט: </span>
                                          {typeof item.customDetails.font === 'string'
                                            ? item.customDetails.font
                                            : item.customDetails.font.name || 'לא צוין'}
                                        </li>
                                      )}
                                      {item.customDetails.notes && (
                                        <li>
                                          <span className="font-medium">הערות מיוחדות: </span>
                                          <div className="mt-1 p-2 bg-white rounded border">
                                            {item.customDetails.notes}
                                          </div>
                                        </li>
                                      )}
                                    </ul>
                                  )}
                                  
                                  {(!item.customDetails && (item.name.includes('מותאמ') || item.name.includes('אישי'))) && (
                                    <div className="mt-2">
                                      <p className="text-sm text-gray-700">מידע נוסף לא זמין. אנא בדוק את הערות ההזמנה.</p>
                                    </div>
                                  )}
                                  
                                  {item.customization && (
                                    <div className="mt-2">
                                      <h5 className="font-medium mb-1">פרטי התאמה נוספים:</h5>
                                      <pre className="bg-white p-2 rounded border text-sm overflow-x-auto">
                                        {JSON.stringify(item.customization, null, 2)}
                                      </pre>
                                    </div>
                                  )}
                            </td>
                            <td className="py-2 px-4 whitespace-nowrap">₪{item.price}</td>
                            <td className="py-2 px-4 whitespace-nowrap">{item.quantity}</td>
                            <td className="py-2 px-4 whitespace-nowrap">₪{item.price * item.quantity}</td>
                          </tr>
                        ))}
                      </tbody>
                      <tfoot>
                        <tr className="bg-gray-50">
                          <td colSpan="4" className="py-2 px-4 text-right font-medium">סה״כ</td>
                          <td className="py-2 px-4 font-bold">₪{order.total}</td>
                        </tr>
                      </tfoot>
                    </table>
                  </div>

                  {order.notes && (
                    <div className="mt-4">
                      <h3 className="font-medium mb-1">הערות</h3>
                      <div className="bg-white p-3 rounded border whitespace-pre-wrap">{order.notes}</div>
                    </div>
                  )}

                  {order.shippingDetails && (
                    <div className="mt-4">
                      <h3 className="font-medium mb-1">פרטי משלוח</h3>
                      <div className="bg-white p-3 rounded border">
                        <p><span className="font-medium">כתובת: </span>{order.shippingDetails.address}</p>
                        {order.shippingDetails.city && <p><span className="font-medium">עיר: </span>{order.shippingDetails.city}</p>}
                        {order.shippingDetails.postalCode && <p><span className="font-medium">מיקוד: </span>{order.shippingDetails.postalCode}</p>}
                      </div>
                    </div>
                  )}
                  
                  <div className="mt-4 flex justify-between">
                    <div>
                      <h3 className="font-medium mb-1">עדכון סטטוס</h3>
                      <select 
                        className="border rounded p-2" 
                        value={order.status}
                        onChange={(e) => handleStatusChange(order._id, e.target.value)}
                        disabled={loading}
                      >
                        <option value="pending">ממתין לטיפול</option>
                        <option value="processing">בטיפול</option>
                        <option value="ready">מוכן לאיסוף</option>
                        <option value="completed">הושלם</option>
                        <option value="cancelled">בוטל</option>
                      </select>
                    </div>
                  </div>
                </div>
              )}
            </div>
          ))}
        </div>
      )}
    </div>
  );
}

// קומפוננטת צפייה בהודעות
function MessagesViewer() {
  const [messages, setMessages] = useState([]);
  const [expandedMessage, setExpandedMessage] = useState(null);
  const [statusFilter, setStatusFilter] = useState('all');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    loadMessages();
  }, []);

  const loadMessages = async (status = null) => {
    try {
      setLoading(true);
      
      // קריאת הודעות מהלוקל סטורג'
      const savedMessages = JSON.parse(localStorage.getItem('contactMessages') || '[]');
      
      // הפיכת תאריכים לאובייקטי Date
      const messagesWithDates = savedMessages.map(msg => ({
        ...msg,
        createdAt: new Date(msg.createdAt)
      }));
      
      // מיון לפי תאריך יצירה (החדש ביותר קודם)
      const sortedMessages = messagesWithDates.sort((a, b) => 
        b.createdAt.getTime() - a.createdAt.getTime()
      );
      
      // סינון לפי סטטוס אם צריך
      const filteredMessages = status ? 
        sortedMessages.filter(msg => msg.status === status) :
        sortedMessages;
      
      setMessages(filteredMessages);
      setError(null);
    } catch (err) {
      console.error('Error loading messages:', err);
      setError('אירעה שגיאה בטעינת ההודעות');
      
      // בחזרה לנתוני דוגמה במקרה של שגיאה
      const mockMessages = [
        {
          _id: '1',
          name: 'אביה כהן',
          email: 'avia@example.com',
          phone: '050-1234567',
          subject: 'שאלה על מוצר',
          message: 'שלום, אני מעוניינת לדעת האם יש אפשרות להזמין שרשרת בצבע זהב עם תליון מיוחד שלא מופיע באתר?',
          createdAt: new Date('2023-06-15T10:30:00'),
          status: 'new'
        },
        {
          _id: '2',
          name: 'רותם לוי',
          email: 'rotem@example.com',
          phone: '052-9876543',
          subject: 'מידע על הזמנה',
          message: 'הי, הזמנתי לפני יומיים שרשרת מעוצבת אישית (הזמנה מספר 12345) ורציתי לדעת מתי בערך היא תהיה מוכנה לאיסוף?',
          createdAt: new Date('2023-06-14T15:45:00'),
          status: 'read'
        },
        {
          _id: '3',
          name: 'נעמה שמואלי',
          email: 'naama@example.com',
          phone: '054-5555555',
          subject: 'עיצוב מותאם אישית',
          message: 'שלום, אני מחפשת עיצוב מיוחד לחברה שלי ליום הולדת. האם אפשר לקבוע פגישה לדבר על אפשרויות?',
          createdAt: new Date('2023-06-13T09:15:00'),
          status: 'new'
        }
      ];
      setMessages(mockMessages);
    } finally {
      setLoading(false);
    }
  };
  
  // סינון הודעות לפי סטטוס
  const filteredMessages = statusFilter === 'all' 
    ? messages 
    : messages.filter(message => message.status === statusFilter);
  
  const handleStatusFilterChange = (e) => {
    setStatusFilter(e.target.value);
  };

  const handleMessageStatusChange = async (messageId, newStatus) => {
    try {
      // עדכון סטטוס בלוקל סטורג'
      const savedMessages = JSON.parse(localStorage.getItem('contactMessages') || '[]');
      
      // עדכון הסטטוס של ההודעה הספציפית
      const updatedMessages = savedMessages.map(msg => 
        msg._id === messageId ? {...msg, status: newStatus} : msg
      );
      
      // שמירה חזרה ללוקל סטורג'
      localStorage.setItem('contactMessages', JSON.stringify(updatedMessages));
      
      // עדכון ב-state
      setMessages(prevMessages => prevMessages.map(msg => 
        msg._id === messageId ? {...msg, status: newStatus} : msg
      ));
    } catch (err) {
      console.error('Error updating message status:', err);
      alert('אירעה שגיאה בעדכון סטטוס ההודעה');
    }
  };
  
  if (loading && messages.length === 0) {
    return <div className="text-center py-8">טוען...</div>;
  }

  if (error) {
    return <div className="text-center py-8 text-red-500">{error}</div>;
  }
  
  return (
    <div>
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-xl font-semibold">הודעות מלקוחות</h2>
        
        <div className="flex items-center">
          <span className="ml-2">סנן לפי סטטוס:</span>
          <select 
            className="border rounded p-2" 
            value={statusFilter}
            onChange={handleStatusFilterChange}
          >
            <option value="all">כל ההודעות</option>
            <option value="new">הודעות חדשות</option>
            <option value="read">הודעות שנקראו</option>
          </select>
        </div>
      </div>
      
      {filteredMessages.length === 0 ? (
        <div className="text-center py-8 text-gray-500">
          {loading ? 'טוען הודעות...' : 'לא נמצאו הודעות בסטטוס זה'}
        </div>
      ) : (
        <div className="space-y-4">
          {filteredMessages.map(message => (
            <div 
              key={message._id} 
              className={`border rounded-lg overflow-hidden ${message.status === 'new' ? 'border-primary' : ''}`}
            >
              <div 
                className="flex justify-between items-center p-4 cursor-pointer hover:bg-gray-50"
                onClick={() => setExpandedMessage(expandedMessage === message._id ? null : message._id)}
              >
                <div className="flex flex-col gap-1">
                  <div className="font-medium">{message.name} - {message.subject}</div>
                  <div className="text-sm text-gray-600">{message.message}</div>
                </div>
                
                <div className="text-gray-400">
                  {expandedMessage === message._id ? (
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clipRule="evenodd" />
                    </svg>
                  ) : (
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd" />
                    </svg>
                  )}
                </div>
              </div>
              
              {expandedMessage === message._id && (
                <div className="p-4 bg-gray-50 border-t">
                  <h3 className="font-medium mb-2">פרטי ההודעה</h3>
                  <div className="overflow-x-auto">
                    <table className="min-w-full divide-y divide-gray-200">
                      <thead>
                        <tr>
                          <th className="py-2 px-4 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">פרט</th>
                          <th className="py-2 px-4 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">ערך</th>
                        </tr>
                      </thead>
                      <tbody className="divide-y divide-gray-200">
                        <tr>
                          <td className="py-2 px-4 whitespace-nowrap">שם</td>
                          <td className="py-2 px-4 whitespace-nowrap">{message.name}</td>
                        </tr>
                        <tr>
                          <td className="py-2 px-4 whitespace-nowrap">אימייל</td>
                          <td className="py-2 px-4 whitespace-nowrap">{message.email}</td>
                        </tr>
                        <tr>
                          <td className="py-2 px-4 whitespace-nowrap">טלפון</td>
                          <td className="py-2 px-4 whitespace-nowrap">{message.phone}</td>
                        </tr>
                        <tr>
                          <td className="py-2 px-4 whitespace-nowrap">הודעה</td>
                          <td className="py-2 px-4 whitespace-nowrap">{message.message}</td>
                        </tr>
                        <tr>
                          <td className="py-2 px-4 whitespace-nowrap">תאריך</td>
                          <td className="py-2 px-4 whitespace-nowrap">{new Date(message.createdAt).toLocaleDateString('he-IL')}</td>
                        </tr>
                      </tbody>
                    </table>
                  </div>

                  <div className="mt-4 flex justify-between">
                    <div>
                      <h3 className="font-medium mb-1">עדכון סטטוס</h3>
                      <select 
                        className="border rounded p-2" 
                        value={message.status}
                        onChange={(e) => handleMessageStatusChange(message._id, e.target.value)}
                        disabled={loading}
                      >
                        <option value="new">חדש</option>
                        <option value="read">נקרא</option>
                      </select>
                    </div>
                  </div>
                </div>
              )}
            </div>
          ))}
        </div>
      )}
    </div>
  );
}